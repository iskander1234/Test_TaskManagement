using Hangfire;
using Hangfire.PostgreSql;
using TaskManagement.Application;
using TaskManagement.Infrastructure;
using TaskManagement.WebAPI.Middlewares;
using Serilog;
using TaskManagement.Application.Background;

var builder = WebApplication.CreateBuilder(args);
var configuration = builder.Configuration;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
builder.Services.AddApplication();
builder.Services.AddInfrastructure(configuration);

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Hangfire —Å PostgreSQL
builder.Services.AddHangfire(config =>
    config.UsePostgreSqlStorage(configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddHangfireServer();

// üìå –î–æ–±–∞–≤–ª—è–µ–º BackgroundJobs –≤ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
builder.Services.AddScoped<BackgroundJobs>();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Serilog
builder.Host.UseSerilog((context, config) =>
{
    config.WriteTo.Console();
    config.WriteTo.File("logs/log-.txt", rollingInterval: RollingInterval.Day);
});

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.UseMiddleware<ValidationExceptionMiddleware>();

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º Hangfire Dashboard
app.UseHangfireDashboard();

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hangfire
using (var scope = app.Services.CreateScope())
{
    var recurringJobManager = scope.ServiceProvider.GetRequiredService<IRecurringJobManager>();

    // üìå –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 00:00 (UTC)
    recurringJobManager.AddOrUpdate(
        "archive-old-tasks",
        () => scope.ServiceProvider.GetRequiredService<BackgroundJobs>().ArchiveOldTasks(),
        Cron.Daily);
}

app.Run();